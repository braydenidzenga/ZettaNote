/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 *
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia';

declare module 'motia' {
  interface FlowContextStateStreams {}

  interface Handlers {
    TriggerTaskReminders: ApiRouteHandler<
      { checkType?: 'all' | 'one-hour' | 'overdue' },
      | ApiResponse<200, { message: string; checkType: string; jobId: string }>
      | ApiResponse<400, { error: string }>,
      { topic: 'send-task-reminders'; data: { jobId: string; checkType: string } }
    >;
    TriggerImageCleanup: ApiRouteHandler<
      { cleanupType?: 'marked' | 'orphaned' | 'comprehensive'; batchSize?: number },
      | ApiResponse<200, { message: string; cleanupType: string; jobId: string }>
      | ApiResponse<400, { error: string }>,
      | {
          topic: 'cleanup-marked-images';
          data: { jobId: string; batchSize: number; cleanupType: string };
        }
      | { topic: 'cleanup-orphaned-images'; data: { jobId: string; cleanupType: string } }
    >;
    SendTaskReminders: EventHandler<{ jobId: string; checkType: string }, never>;
    ScheduledTaskReminders: CronHandler<{
      topic: 'send-task-reminders';
      data: { jobId: string; checkType: string };
    }>;
    ScheduledImageCleanup: CronHandler<
      | {
          topic: 'cleanup-marked-images';
          data: { jobId: string; batchSize: number; cleanupType: string };
        }
      | { topic: 'cleanup-orphaned-images'; data: { jobId: string; cleanupType: string } }
    >;
    ProcessPageSave: EventHandler<
      { jobId: string; pageId: string; newPageData: string; userId: string },
      never
    >;
    ProcessImageUpload: EventHandler<
      { jobId: string; image: string; originalName?: string; pageId?: string; userId: string },
      never
    >;
    HealthCheck: ApiRouteHandler<
      Record<string, unknown>,
      ApiResponse<200, { status: string; timestamp: string; service: string }>,
      never
    >;
    CleanupOrphanedImages: EventHandler<{ jobId: string; cleanupType: string }, never>;
    CleanupMarkedImages: EventHandler<
      { jobId: string; batchSize: number; cleanupType: string },
      never
    >;
    AsyncPageSave: ApiRouteHandler<
      { pageId: string; newPageData: string; userId: string },
      | ApiResponse<202, { message: string; jobId: string; pageId: string }>
      | ApiResponse<400, { error: string }>,
      {
        topic: 'process-page-save';
        data: { jobId: string; pageId: string; newPageData: string; userId: string };
      }
    >;
    AsyncImageUpload: ApiRouteHandler<
      { image: string; originalName?: string; pageId?: string; userId: string },
      ApiResponse<202, { message: string; jobId: string }> | ApiResponse<400, { error: string }>,
      {
        topic: 'process-image-upload';
        data: {
          jobId: string;
          image: string;
          originalName?: string;
          pageId?: string;
          userId: string;
        };
      }
    >;
  }
}
